/* The following code was generated by JFlex 1.3.5 on 18.06.19 18:35 */

package cup.aug;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.util.Map;
import java.util.HashMap;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 18.06.19 18:35 from the specification file
 * <tt>file:/C:/Users/a.szczepanowska/eclipse-workspace/lexer/lexer.jflex</tt>
 */
class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STARTCLOSINGTAG = 3;
  final public static int STARTTAG = 2;
  final public static int YYINITIAL = 0;
  final public static int MAIN = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\21\1\20\1\0\1\21\1\17\22\0\1\12\1\2\1\24"+
    "\12\0\1\26\1\0\1\27\12\25\2\0\1\1\1\23\1\16\2\0"+
    "\2\22\1\5\1\3\1\11\2\22\1\13\3\22\1\15\1\14\1\22"+
    "\1\4\1\10\3\22\1\6\4\22\1\7\1\22\6\0\2\22\1\5"+
    "\1\3\1\11\2\22\1\13\3\22\1\15\1\14\1\22\1\4\1\10"+
    "\3\22\1\6\4\22\1\7\1\22\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    24,    48,    72,    96,   120,    96,   144,   168,   192, 
      216,   240,    96,   264,   288,   312,    96,   336,   360,    96, 
      384,   408,   240,    96,   432,   456,   480,   504,   528,   552, 
      576,   600,   624,   648,   672,   552,   696,   720,   744,   768, 
      792,   816,   840,    96
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\10\5\1\7\4\5\1\10\2\7\6\5"+
    "\1\11\1\12\26\11\3\5\7\13\1\14\3\13\1\15"+
    "\1\16\2\14\1\13\2\5\1\17\1\5\1\20\3\5"+
    "\7\17\1\7\3\17\1\21\1\10\2\7\1\17\2\5"+
    "\1\17\2\5\32\0\1\22\45\0\1\7\7\0\1\11"+
    "\1\0\26\11\2\0\1\23\24\0\1\24\3\0\7\13"+
    "\1\0\3\13\4\0\1\13\1\25\1\0\1\17\5\0"+
    "\7\26\1\27\3\26\1\0\3\27\1\26\10\0\7\26"+
    "\1\27\3\26\1\0\1\27\1\14\1\27\1\26\10\0"+
    "\7\17\1\0\3\17\4\0\1\17\2\0\1\17\20\0"+
    "\1\30\14\0\1\31\22\0\1\32\27\0\1\32\4\0"+
    "\7\33\1\27\3\33\1\0\3\27\1\33\1\0\1\34"+
    "\6\0\7\26\1\0\3\26\4\0\1\26\1\25\10\0"+
    "\1\35\51\0\1\36\4\0\7\33\1\27\3\33\1\0"+
    "\3\27\1\33\1\25\4\0\24\34\1\14\3\34\5\0"+
    "\1\37\22\0\20\36\1\0\5\36\1\40\1\36\6\0"+
    "\1\41\21\0\20\36\1\0\5\36\1\42\1\36\7\0"+
    "\1\43\20\0\16\36\1\44\1\36\1\0\5\36\1\42"+
    "\1\36\10\0\1\45\30\0\1\46\30\0\1\47\30\0"+
    "\1\50\22\0\1\51\35\0\1\52\30\0\1\53\12\0"+
    "\16\53\1\54\11\53";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  1,  0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1, 
     9,  0,  0,  9,  1,  0,  0,  9,  0,  0,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
     
    private ComplexSymbolFactory symbolFactory;
    private String currentTagName = "";
    private Map<String, Integer> startTagsMap = new HashMap<>();
    private Map<String, Integer> endTagsMap = new HashMap<>();
    
    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is) {
		this(is);
        symbolFactory = sf;
        putStartTags();
        putEndTags();
    }
    
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader) {
		this(reader);
        symbolFactory = sf;
        putStartTags();
        putEndTags();
    }
    
    private void putStartTags() {
    	//main elements:
    	startTagsMap.put("html", HTML_OPEN);
    	startTagsMap.put("head", HEAD_OPEN);
    	startTagsMap.put("body", BODY_OPEN);
    	//void elements:
    	startTagsMap.put("area", SINGLE_TAG);
    	startTagsMap.put("col", SINGLE_TAG);
    	startTagsMap.put("embed", SINGLE_TAG);
    	startTagsMap.put("hr", SINGLE_TAG);
    	startTagsMap.put("input", SINGLE_TAG);
    	startTagsMap.put("param", SINGLE_TAG);
    	startTagsMap.put("source", SINGLE_TAG);
    	startTagsMap.put("track", SINGLE_TAG);
    	startTagsMap.put("wbr", SINGLE_TAG);
    	//void elements in head:
    	startTagsMap.put("base", IN_HEAD_TAG);
    	startTagsMap.put("link", IN_HEAD_TAG);
    	startTagsMap.put("meta", IN_HEAD_TAG);
    	//normal elements in head:
    	startTagsMap.put("title", TITLE_TAG_OPEN); //only once
    	startTagsMap.put("style", IN_HEAD_TAG_OPEN);
    	startTagsMap.put("script", IN_HEAD_TAG_OPEN);
    	startTagsMap.put("noscript", IN_HEAD_TAG_OPEN);
    	//a,p,h:
    	startTagsMap.put("a", A_TAG_OPEN); //a can be nested also in a,p,h
    	startTagsMap.put("p", A_P_H_TAG_OPEN);
    	startTagsMap.put("h1", A_P_H_TAG_OPEN);
    	startTagsMap.put("h2", A_P_H_TAG_OPEN);
    	startTagsMap.put("h3", A_P_H_TAG_OPEN);
    	startTagsMap.put("h4", A_P_H_TAG_OPEN);
    	startTagsMap.put("h5", A_P_H_TAG_OPEN);
    	startTagsMap.put("h6", A_P_H_TAG_OPEN);
    	//void elements in a,p,h
    	startTagsMap.put("br", IN_TEXT_TAG);
    	startTagsMap.put("img", IN_TEXT_TAG);
    	//normal elements in a,p,h
    	startTagsMap.put("b", IN_TEXT_TAG_OPEN);
    	startTagsMap.put("em", IN_TEXT_TAG_OPEN);
    	startTagsMap.put("strong", IN_TEXT_TAG_OPEN);
    	startTagsMap.put("pre", IN_TEXT_TAG_OPEN);
    	startTagsMap.put("span", IN_TEXT_TAG_OPEN);
    	startTagsMap.put("label", IN_TEXT_TAG_OPEN);
    	//table:
    	startTagsMap.put("table", TABLE_TAG_OPEN);
    	startTagsMap.put("tr", ROW_TAG_OPEN);
    	startTagsMap.put("th", HEADER_TAG_OPEN);
    	startTagsMap.put("td", CELL_TAG_OPEN);
    	//ol, ul, li
    	startTagsMap.put("ol", LIST_TAG_OPEN);
    	startTagsMap.put("ul", LIST_TAG_OPEN);
    	startTagsMap.put("li", ITEM_TAG_OPEN);
    	//div
    	startTagsMap.put("div", DIV_TAG_OPEN);
    	
    }
    
    private void putEndTags() {
    	//main elements:
    	endTagsMap.put("html", HTML_CLOSE);
    	endTagsMap.put("head", HEAD_CLOSE);
    	endTagsMap.put("body", BODY_CLOSE);
    	//normal elements in head:
    	endTagsMap.put("title", TITLE_TAG_CLOSE); //only once
    	endTagsMap.put("style", IN_HEAD_TAG_CLOSE);
    	endTagsMap.put("script", IN_HEAD_TAG_CLOSE);
    	endTagsMap.put("noscript", IN_HEAD_TAG_CLOSE);
    	//a,p,h:
    	endTagsMap.put("a", A_TAG_CLOSE);
    	endTagsMap.put("p", A_P_H_TAG_CLOSE);
    	endTagsMap.put("h1", A_P_H_TAG_CLOSE);
    	endTagsMap.put("h2", A_P_H_TAG_CLOSE);
    	endTagsMap.put("h3", A_P_H_TAG_CLOSE);
    	endTagsMap.put("h4", A_P_H_TAG_CLOSE);
    	endTagsMap.put("h5", A_P_H_TAG_CLOSE);
    	endTagsMap.put("h6", A_P_H_TAG_CLOSE);
    	//normal elements in a,p,h:
    	endTagsMap.put("b", IN_TEXT_TAG_CLOSE);
    	endTagsMap.put("em", IN_TEXT_TAG_CLOSE);
    	endTagsMap.put("strong", IN_TEXT_TAG_CLOSE);
    	endTagsMap.put("pre", IN_TEXT_TAG_CLOSE);
    	endTagsMap.put("span", IN_TEXT_TAG_CLOSE);
    	endTagsMap.put("label", IN_TEXT_TAG_CLOSE);
    	//table:
    	endTagsMap.put("table", TABLE_TAG_CLOSE);
    	endTagsMap.put("tr", ROW_TAG_CLOSE);
    	endTagsMap.put("th", HEADER_TAG_CLOSE);
    	endTagsMap.put("td", CELL_TAG_CLOSE);
    	//ol, ul, li
    	endTagsMap.put("ol", LIST_TAG_CLOSE);
    	endTagsMap.put("ul", LIST_TAG_CLOSE);
    	endTagsMap.put("li", ITEM_TAG_CLOSE);
    	//div
    	endTagsMap.put("div", DIV_TAG_CLOSE);    
    }
    
    private Symbol getSymbol(int code, String value) {
    	return symbolFactory.newSymbol(terminalNames[code], code, value);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[864];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 112) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 43: 
          {  System.out.println(yytext() + " begin MAIN"); yybegin(MAIN);  }
        case 45: break;
        case 10: 
        case 14: 
          {  System.out.println(yytext()); currentTagName = yytext().toLowerCase(); }
        case 46: break;
        case 16: 
          {  	yybegin(MAIN); 
							if (endTagsMap.containsKey(currentTagName)) {
								System.out.println("return end tag from map, begin MAIN ");
								return getSymbol(endTagsMap.get(currentTagName), currentTagName);
							} else {
								System.out.println("return CLOSE_TAG, begin MAIN ");
								return symbolFactory.newSymbol("CLOSE_TAG", CLOSE_TAG, currentTagName);
							}
						 }
        case 47: break;
        case 4: 
        case 5: 
        case 15: 
          {  throw new Error("Illegal character: " + yytext());  }
        case 48: break;
        case 12: 
          {  	yybegin(MAIN);
								if (startTagsMap.containsKey(currentTagName)) {
									System.out.println("return start element from map, begin MAIN ");
									return getSymbol(startTagsMap.get(currentTagName), currentTagName);
								} else {
									System.out.println("return OPEN_TAG, begin MAIN ");
									return symbolFactory.newSymbol("OPEN_TAG", OPEN_TAG, currentTagName);
								}
							 }
        case 49: break;
        case 19: 
          {  System.out.println("begin STARTCLOSINGTAG"); yybegin(STARTCLOSINGTAG);  }
        case 50: break;
        case 35: 
          {  /* ignore */  }
        case 51: break;
        case 20: 
        case 26: 
          {  /* ignore */  }
        case 52: break;
        case 1: 
        case 8: 
          {  /* ignore */  }
        case 53: break;
        case 6: 
        case 7: 
          {  /* ignore */  }
        case 54: break;
        case 11: 
        case 13: 
          {  /* ignore */  }
        case 55: break;
        case 9: 
          {  System.out.println("begin STARTTAG"); yybegin(STARTTAG);  }
        case 56: break;
        case 23: 
          {  	yybegin(MAIN);
								if (startTagsMap.containsKey(currentTagName)) {
									System.out.println("return start element from map, begin MAIN ");
									return getSymbol(startTagsMap.get(currentTagName), currentTagName);
								} else {
									System.out.println("return SINGLE_TAG, begin MAIN ");
									return symbolFactory.newSymbol("SINGLE_TAG", SINGLE_TAG, currentTagName); 
								}
							 }
        case 57: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
